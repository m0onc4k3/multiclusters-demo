"""
Django settings for subscription_registration project.

Generated by 'django-admin startproject' using Django 4.2.7.
"""

from pathlib import Path
import os

import sys
#import pymongo
# #############################################
# from subscription_registration.mongodb_setup import get_mongodb_connection_string, load_vault_secrets
# #############################################
# # Development clusterS
# # Load secrets from Vault
# try:
#     vault_secrets = load_vault_secrets()
    
#     # Use V ault secrets for Django configuration
#     SECRET_KEY = vault_secrets.get('SECRET_KEY', 'fallback-secret-key')
#     DEBUG = vault_secrets.get('DEBUG', 'False').lower() == 'true'
    
#     MONGODB_URI = get_mongodb_connection_string()
#     print(f"DEBUG: MONGODB_URI={MONGODB_URI}")

#     DATABASES = {
#         'default': {
#             'ENGINE': 'djongo',
#             'NAME': 'Subscription',
#             'ENFORCE_SCHEMA': False,
#             'CLIENT': {
#                 'host': MONGODB_URI,
#                 'ssl': True,
#                 'ssl_cert_reqs': 'CERT_REQUIRED'
#             }
#         }
#     }
    
# except Exception as e:
#     print(f"Failed to load Vault secrets: {e}")
#     # Fallback to environment variables or default values
#     SECRET_KEY = os.getenv('SECRET_KEY', 'fallback-key')
#     DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
#     # Use fallback MongoDB connection without X.509
# #############################################

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)-)82c*wv5tilddk*rml85$x*-gg49!2%(ws%sk+^^u-4er$zg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', '192.168.1.6']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'subscription',
    'celery'
]

# Email setting
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Celery settings
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'subscription_registration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'subscription_registration.wsgi.application'

#############################################################################

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
#############################################################################

#############################################################################
#Development .venv
#Database
# settings.py

# import os
# from pathlib import Path

# MONGODB_URI = os.environ.get(
#     'MONGODB_URI',
#     'mongodb+srv://mongodb.g3jersh.mongodb.net/Subscription?authSource=$external&authMechanism=MONGODB-X509'
# )
# MONGODB_CERT_PATH = os.environ.get('MONGODB_CERT_PATH', '/home/taggioml/.ssh/X509-cert-3705830648530031648.pem')

# # Validate cert file exists
# if not os.path.isfile(MONGODB_CERT_PATH):
#     raise Exception(f"MongoDB X.509 certificate not found at {MONGODB_CERT_PATH}")

# # Extract username: the Subject DN of the X.509 certificate (URL-encoded)
# # Example: "CN=your@email.com,OU=OrgUnit,O=Organization,L=City,ST=State,C=US"
# # Must be URL-encoded: @ → %40, space → %20, etc.
# MONGODB_X509_USERNAME = os.environ.get(
#     'MONGODB_X509_USERNAME',
#     'CN=taggioml%40example.com,OU=DevOps,O=TaggioML,L=San%20Francisco,ST=California,C=US'
# )

# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',
#         'NAME': 'Subscription',
#         'ENFORCE_SCHEMA': False,
#         'CLIENT': {
#             'host': MONGODB_URI,
#             'tls': True,
#             'tlsCertificateKeyFile': MONGODB_CERT_PATH,
#             'authMechanism': 'MONGODB-X509',
#             'username': MONGODB_X509_USERNAME,
#         }
#     }
# }
#############################################################################

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

LOGIN_URL = '/login/'

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'subscription/static']
STATIC_ROOT = BASE_DIR / 'staticfiles'  # New: Directory for collected static files

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'