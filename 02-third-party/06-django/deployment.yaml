apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-subscription
  namespace: ms-demo-{{ target.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django-subscription
  template:
    metadata:
      labels:
        app: django-subscription
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "mongodb-conn"
        vault.hashicorp.com/vault-addr: "http://{{ vault_cluster_a_ip }}:30000"
        
        # Inject MongoDB certificate
        vault.hashicorp.com/agent-inject-secret-mongodb-cert: "secret/data/mongodb/certificates"
        vault.hashicorp.com/agent-inject-template-mongodb-cert: |
          {% raw %}{{- with secret "secret/data/mongodb/certificates" -}}
          {{ .Data.data.client_cert | base64Decode }}
          {{- end }}{% endraw %}
        
        # Inject MongoDB connection base URI
        vault.hashicorp.com/agent-inject-secret-mongodb-config: "secret/data/mongodb/connection"
        vault.hashicorp.com/agent-inject-template-mongodb-config: |
          {% raw %}{{- with secret "secret/data/mongodb/connection" -}}
          {{ .Data.data.base_uri }}
          {{- end }}{% endraw %}
        
        # # Optional: Inject other secrets like Django secret key
        # vault.hashicorp.com/agent-inject-secret-django-secrets: "secret/data/django/config"
        # vault.hashicorp.com/agent-inject-template-django-secrets: |
        #   {% raw %}{{- with secret "secret/data/django/config" -}}
        #   SECRET_KEY={{ .Data.data.secret_key }}
        #   DEBUG={{ .Data.data.debug }}
        #   {{- end }}{% endraw %}
    spec:
      serviceAccountName: django-subscription
      containers:
      - name: django-app
        image: ghcr.io/m0onc4k3/django_subscription:latest
        ports:
        - containerPort: 8000
        
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: "subscription_registration.settings"
        - name: PYTHONUNBUFFERED
          value: "1"
        # Set paths where Vault will inject the secrets
        - name: VAULT_SECRETS_PATH
          value: "/vault/secrets"
        - name: MONGODB_CERT_FILE
          value: "/vault/secrets/mongodb-cert"
        - name: MONGODB_CONFIG_FILE
          value: "/vault/secrets/mongodb-config"
        # - name: DJANGO_SECRETS_FILE
        #   value: "/vault/secrets/django-secrets"
        
        volumeMounts:
        # Mount tmpfs for secure certificate storage
        - name: mongodb-certs
          mountPath: /app/certs
        - name: tmp-storage
          mountPath: /tmp
        
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      
      imagePullSecrets:
        - name: ghcr-secret
      restartPolicy: Always

      volumes:
      # Memory-backed storage for certificates (most secure)
      - name: mongodb-certs
        emptyDir:
          medium: Memory
          sizeLimit: 10Mi
      - name: tmp-storage
        emptyDir:
          medium: Memory
          sizeLimit: 50Mi
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: django-subscription-service
  namespace: ms-demo-{{ target.name }}
  labels:
    app: django-subscription
    service: django-subscription-internal
spec:
  selector:
    app: django-subscription
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: django-subscription-nodeport
  namespace: ms-demo-{{ target.name }}
  labels:
    app: django-subscription
    service: django-subscription-nodeport
spec:
  type: NodePort
  selector:
    # Must match deployment pod labels
    app: django-subscription  
  ports:
    # Good practice to name ports
  - name: http              
    # Service port (internal cluster access)
    port: 8000             
    # Container port (where Django runs)
    targetPort: 8000       
    # External access port (30000-32767 range)
    nodePort: 30080        
    # Explicit protocol specification
    protocol: TCP          

---
# Optional: Create a health check endpoint
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: django-health-config
#   namespace: ms-demo-{{ target.name }}
# data:
#   health_check.py: |
#     from django.http import JsonResponse
#     from django.views import View
#     import os
    
#     class HealthCheckView(View):
#         def get(self, request):
#             # Basic health check
#             health_status = {
#                 "status": "healthy",
#                 "mongodb_cert_exists": os.path.exists("/app/certs/mongodb-client.pem"),
#                 "vault_secrets_loaded": os.path.exists("/vault/secrets/mongodb-cert")
#             }
#             return JsonResponse(health_status)